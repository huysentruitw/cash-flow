// <auto-generated>
//  !! WARNING !! This file is auto-generated. Changes to this file will be lost.
// </auto-generated>


using System;

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using CashFlow.Command.Abstractions;
using HotChocolate;
using MediatR;

namespace CashFlow.GraphApi.Schema
{
#pragma warning disable IDE0008 // Use explicit type
    public sealed class Mutation
    {
        private readonly IMapper _mapper;

        public Mutation(OutputTypesMapperResolver mapperResolver)
        {
            _mapper = mapperResolver();
        }

        [GraphQLNonNullType]
        public AccountMutations Account => new AccountMutations(_mapper);

        [GraphQLNonNullType]
        public CodeMutations Code => new CodeMutations(_mapper);

        [GraphQLNonNullType]
        public FinancialYearMutations FinancialYear => new FinancialYearMutations(_mapper);

        [GraphQLNonNullType]
        public SupplierMutations Supplier => new SupplierMutations(_mapper);

        [GraphQLNonNullType]
        public TransactionMutations Transaction => new TransactionMutations(_mapper);
    }

    public sealed class AccountMutations
    {
        private readonly IMapper _mapper;

        public AccountMutations(IMapper mapper)
        {
            _mapper = mapper;
        }

        [GraphQLDescription("Add an account")]
        public async Task<MutationInfo> Add([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AddAccountInput input)
        {
            var command = new AddAccountCommand
            {
                Id = Guid.NewGuid(),
                Name = input.Name,
                Type = input.Type,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Change the type of an account")]
        public async Task<MutationInfo> ChangeType([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] ChangeAccountTypeInput input)
        {
            var command = new ChangeAccountTypeCommand
            {
                Id = input.Id,
                Type = input.Type,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Remove an account")]
        public async Task<MutationInfo> Remove([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] RemoveAccountInput input)
        {
            var command = new RemoveAccountCommand
            {
                Id = input.Id,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Rename an account")]
        public async Task<MutationInfo> Rename([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] RenameAccountInput input)
        {
            var command = new RenameAccountCommand
            {
                Id = input.Id,
                Name = input.Name,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }
    }

    public sealed class CodeMutations
    {
        private readonly IMapper _mapper;

        public CodeMutations(IMapper mapper)
        {
            _mapper = mapper;
        }

        [GraphQLDescription("Activate a code")]
        public async Task<MutationInfo> Activate([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] ActivateCodeInput input)
        {
            var command = new ActivateCodeCommand
            {
                Name = input.Name,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Add a code")]
        public async Task<MutationInfo> Add([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AddCodeInput input)
        {
            var command = new AddCodeCommand
            {
                Name = input.Name,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Deactivate a code")]
        public async Task<MutationInfo> Deactivate([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] DeactivateCodeInput input)
        {
            var command = new DeactivateCodeCommand
            {
                Name = input.Name,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Remove a code")]
        public async Task<MutationInfo> Remove([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] RemoveCodeInput input)
        {
            var command = new RemoveCodeCommand
            {
                Name = input.Name,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Rename a code")]
        public async Task<MutationInfo> Rename([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] RenameCodeInput input)
        {
            var command = new RenameCodeCommand
            {
                OriginalName = input.OriginalName,
                NewName = input.NewName,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }
    }

    public sealed class FinancialYearMutations
    {
        private readonly IMapper _mapper;

        public FinancialYearMutations(IMapper mapper)
        {
            _mapper = mapper;
        }

        [GraphQLDescription("Set the given financial year as active")]
        public async Task<MutationInfo> Activate([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] ActivateFinancialYearInput input)
        {
            var command = new ActivateFinancialYearCommand
            {
                Id = input.Id,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Add a new financial year")]
        public async Task<MutationInfo> Add([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AddFinancialYearInput input)
        {
            var command = new AddFinancialYearCommand
            {
                Id = Guid.NewGuid(),
                Name = input.Name,
                PreviousFinancialYearId = input.PreviousFinancialYearId,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }
    }

    public sealed class SupplierMutations
    {
        private readonly IMapper _mapper;

        public SupplierMutations(IMapper mapper)
        {
            _mapper = mapper;
        }

        [GraphQLDescription("Add a supplier")]
        public async Task<MutationInfo> Add([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AddSupplierInput input)
        {
            var command = new AddSupplierCommand
            {
                Id = Guid.NewGuid(),
                Name = input.Name,
                ContactInfo = input.ContactInfo,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Remove a supplier")]
        public async Task<MutationInfo> Remove([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] RemoveSupplierInput input)
        {
            var command = new RemoveSupplierCommand
            {
                Id = input.Id,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Rename a supplier")]
        public async Task<MutationInfo> Rename([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] RenameSupplierInput input)
        {
            var command = new RenameSupplierCommand
            {
                Id = input.Id,
                Name = input.Name,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Update the contact info of the supplier")]
        public async Task<MutationInfo> UpdateContactInfo([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] UpdateSupplierContactInfoInput input)
        {
            var command = new UpdateSupplierContactInfoCommand
            {
                Id = input.Id,
                ContactInfo = input.ContactInfo,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }
    }

    public sealed class TransactionMutations
    {
        private readonly IMapper _mapper;

        public TransactionMutations(IMapper mapper)
        {
            _mapper = mapper;
        }

        [GraphQLDescription("Adds an expense transaction")]
        public async Task<MutationInfo> AddExpense([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AddExpenseTransactionInput input)
        {
            var command = new AddExpenseTransactionCommand
            {
                Id = Guid.NewGuid(),
                FinancialYearId = input.FinancialYearId,
                TransactionDate = input.TransactionDate,
                AccountId = input.AccountId,
                SupplierId = input.SupplierId,
                AmountInCents = input.AmountInCents,
                Description = input.Description,
                Comment = input.Comment,
                CodeNames = input.CodeNames,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Adds an income transaction")]
        public async Task<MutationInfo> AddIncome([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AddIncomeTransactionInput input)
        {
            var command = new AddIncomeTransactionCommand
            {
                Id = Guid.NewGuid(),
                FinancialYearId = input.FinancialYearId,
                TransactionDate = input.TransactionDate,
                AccountId = input.AccountId,
                AmountInCents = input.AmountInCents,
                Description = input.Description,
                Comment = input.Comment,
                CodeNames = input.CodeNames,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Adds a transfer transaction")]
        public async Task<MutationInfo> AddTransfer([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AddTransferTransactionInput input)
        {
            var command = new AddTransferTransactionCommand
            {
                IdOrigin = Guid.NewGuid(),
                IdDestination = Guid.NewGuid(),
                FinancialYearId = input.FinancialYearId,
                TransactionDate = input.TransactionDate,
                OriginAccountId = input.OriginAccountId,
                DestinationAccountId = input.DestinationAccountId,
                AmountInCents = input.AmountInCents,
                Description = input.Description,
                Comment = input.Comment,
                CodeNames = input.CodeNames,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Assigns a code to a transaction")]
        public async Task<MutationInfo> AssignCode([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AssignCodeToTransactionInput input)
        {
            var command = new AssignCodeToTransactionCommand
            {
                Id = input.Id,
                CodeName = input.CodeName,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Assign a unique evidence number to a transaction")]
        public async Task<MutationInfo> AssignEvidenceNumber([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] AssignEvidenceNumberToTransactionInput input)
        {
            var command = new AssignEvidenceNumberToTransactionCommand
            {
                Id = input.Id,
                EvidenceNumber = input.EvidenceNumber,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Removes the latest transaction")]
        public async Task<MutationInfo> RemoveLatest([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] RemoveLatestTransactionInput input)
        {
            var command = new RemoveLatestTransactionCommand
            {
                Id = input.Id,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Unassigns a code from a transaction")]
        public async Task<MutationInfo> UnassignCode([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] UnassignCodeFromTransactionInput input)
        {
            var command = new UnassignCodeFromTransactionCommand
            {
                Id = input.Id,
                CodeName = input.CodeName,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Unassigns the evidence number from a transaction")]
        public async Task<MutationInfo> UnassignEvidenceNumber([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] UnassignEvidenceNumberFromTransactionInput input)
        {
            var command = new UnassignEvidenceNumberFromTransactionCommand
            {
                Id = input.Id,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }

        [GraphQLDescription("Update the description of a transaction")]
        public async Task<MutationInfo> UpdateDescription([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] UpdateDescriptionOfTransactionInput input)
        {
            var command = new UpdateDescriptionOfTransactionCommand
            {
                Id = input.Id,
                Description = input.Description,
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

            return MutationInfo.FromCommand(command);
        }
    }
#pragma warning restore IDE0008 // Use explicit type
}
