<#@ output extension=".cs" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="./../../Templates/Base.tt" #>
<#

var commands = LoadDefinitions(Host.ResolvePath(@"./../../CashFlow.Command.Abstractions/Definitions"), "*.Commands.def");
var results = LoadDefinitions(Host.ResolvePath(@"./../../CashFlow.Command.Abstractions/Definitions"), "*.Results.def");
var groupedCommands = commands
    .GroupBy(
        x => x.GroupName,
        x => x,
        (groupName, commandsInGroup) => new { GroupName = groupName, Commands = commandsInGroup.ToArray() })
    .ToDictionary(x => x.GroupName, x => x.Commands);

bool CanIncludeSubjectId(TypeDefinition type)
    => type.Fields.Any(x => x.Name == "Id" && x.Type == "Guid");

void RenderFieldAssignments(TypeDefinition type, string sourceBase = "input", int indentationDepth = 0)
{
    var indentation = new string(' ', indentationDepth * 4);
    foreach (var field in type.Fields)
    {
        if (field.IsRequired && field.DefaultValue != null)
        {
#>
                <#=indentation #><#=field.Name #> = <#=field.DefaultValue #>,
<#
        }
        else if (field.NestedType != null)
        {
            var sourceName = field.Name;
            var isArray = field.Type.EndsWith("[]");
            if (!isArray)
            {
#>
                <#=indentation #><#=field.Name #> = new <#=field.NestedType.Name #>
                <#=indentation #>{
<#
                RenderFieldAssignments(field.NestedType, $"{sourceBase}.{sourceName}", indentationDepth + 1);
#>
                <#=indentation #>},
<#
            }
            else
            {
                var temporaryVariableName = "" + (char)('a' + indentationDepth);
#>
                <#=indentation #><#=field.Name #> = <#=sourceBase #>.<#=sourceName #>.Select(<#=temporaryVariableName #> => new <#=field.NestedType.Name #>
                <#=indentation #>{
<#
                RenderFieldAssignments(field.NestedType, temporaryVariableName, indentationDepth + 1);
#>
                <#=indentation #>}).ToArray(),
<#
            }
        }
        else
        {
#>
                <#=indentation #><#=field.Name #> = <#=sourceBase #>.<#=field.Name #>,
<#
        }
    }
}

#>
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using CashFlow.Command.Abstractions;
using HotChocolate;
using MediatR;

namespace CashFlow.GraphApi.Schema
{
#pragma warning disable IDE0008 // Use explicit type
    public sealed class Mutation
    {
        private readonly IMapper _mapper;

        public Mutation(OutputTypesMapperResolver mapperResolver)
        {
            _mapper = mapperResolver();
        }
<#
foreach (var groupName in groupedCommands.Keys)
{
#>

        [GraphQLNonNullType]
        public <#=groupName #>Mutations <#=groupName #> => new <#=groupName #>Mutations(_mapper);
<#
}
#>
    }
<#
foreach (var kvp in groupedCommands)
{
#>

    public sealed class <#=kvp.Key #>Mutations
    {
        private readonly IMapper _mapper;

        public <#=kvp.Key #>Mutations(IMapper mapper)
        {
            _mapper = mapper;
        }
<#
    foreach (var command in kvp.Value)
    {
        var mutationName = command.ShortName ?? command.Name;
#>

<#
        if (command.Description != null)
        {
#>
        [GraphQLDescription("<#=command.Description #>")]
<#
        }

        var returnType = command.ResponseType != null
            ? $"MutationInfo<{command.ResponseType}>"
            : "MutationInfo";

        if (command.Fields.Any())
        {
#>
        public async Task<<#=returnType #>> <#=mutationName #>([Service] IMediator mediator, [Service] IRequestInfo requestInfo, [GraphQLNonNullType] <#=command.Name #>Input input)
<#
        }
        else
        {
#>
        public async Task<<#=returnType #>> <#=mutationName #>([Service] IMediator mediator, [Service] IRequestInfo requestInfo)
<#
        }
#>
        {
            var command = new <#=command.Name #>Command
            {
<#
        RenderFieldAssignments(command);
#>
                Headers = new CommandHeaders(correlationId: Guid.NewGuid(), identity: requestInfo.Identity, remoteIpAddress: requestInfo.IpAddress)
            };

            var result = await mediator.Send(command);

<#
        if (command.ResponseType != null)
        {
#>
            return MutationInfo<<#=command.ResponseType #>>.FromCommand(command,
<#
            var result = FindDefinition(results, command.ResponseType);
            if (result != null)
            {
#>
                new <#=command.ResponseType #>
                {
<#
                foreach (var resultField in result.Fields)
                {
#>
                    <#=resultField.Name #> = result.<#=resultField.Name #>,
<#
                }
#>
                });
<#
            }
            else
            {
#>
                _mapper.Map<<#=command.ResponseType #>>(result));
<#
            }
        }
        else
        {
#>
            return MutationInfo.FromCommand(command);
<#
        }
#>
        }
<#
    }
#>
    }
<#
}
#>
#pragma warning restore IDE0008 // Use explicit type
}
