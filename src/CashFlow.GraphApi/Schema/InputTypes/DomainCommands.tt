<#@ output extension=".cs" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="./../../../Templates\Base.tt" #>
<#

string GetFieldType(FieldDefinition field)
{
    var typeName = field.Type;

    if (field.NestedType != null)
    {
        var baseTypeName = typeName.TrimEnd(new[] { '[', ']' });
        typeName = typeName.Replace(baseTypeName, $"{baseTypeName}Input");
    }

    if (!field.IsRequired && (field.IsEnum || IsValueType(field.Type)))
    {
        // Optional value type
        typeName = $"{typeName}?";
    }

    return typeName;
}

#>
using CashFlow.Enums;
using HotChocolate;

// ReSharper disable ClassNeverInstantiated.Global
namespace CashFlow.GraphApi.Schema
{
<#
var commands = LoadDefinitions(Host.ResolvePath(@"./../../../CashFlow.Command.Abstractions/Definitions"), "*.Commands.def");
var nestedTypes = ExtractNestedTypes(commands);

foreach (var type in commands.Union(nestedTypes))
{
    if (!type.Fields.Any()) continue;

    if (type.IsObsolete) continue;

    if (type.Description != null)
    {
#>
    [GraphQLDescription("<#=type.Description #>")]
<#
    }
#>
    public sealed class <#=type.Name #>Input
    {
<#
    foreach (var field in type.Fields)
    {
        if (field.IsRequired && field.DefaultValue != null) continue;

        if (field.IsRequired)
        {
#>
        [GraphQLNonNullType]
<#
        }

        if (field.Description != null)
        {
#>
        [GraphQLDescription("<#=field.Description #>")]
<#
        }

#>
        public <#=GetFieldType(field) #> <#=field.Name #> { get; set; }
<#
    }
#>
    }

<#
}
#>
}
