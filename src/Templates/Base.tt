<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ include file="./Header.tt" #>
<#@ include file="./TypeDefinition.tt" #>
using System;
<#+

public static TypeDefinition FindDefinition(IEnumerable<TypeDefinition> definitions, string name)
{
    return definitions.FirstOrDefault(x => x.Name == name);
}

public static TypeDefinition[] LoadDefinitions(string path, string pattern)
{
    var result = new List<TypeDefinition>();
    foreach (string file in Directory.EnumerateFiles(path, pattern))
        result.AddRange(LoadDefinition(file));

    return result.OrderBy(x => x.GroupName).ThenBy(x => x.Name).ToArray();
}

public static IEnumerable<TypeDefinition> LoadDefinition(string definitionFileName)
{
    var fileName = Path.GetFileName(definitionFileName);
    var lineNumber = -1;
    var lines = new Queue<string>(File.ReadLines(definitionFileName));
    while (lines.Any())
    {
        lineNumber++;
        var definition = lines.Dequeue().Trim();
        if (string.IsNullOrEmpty(definition))
            continue;

        var typeDefinition = ParseTypeDefinition(definition, fileName, lineNumber);
        typeDefinition.Fields = LoadFieldDefinitions(lines, fileName, ref lineNumber);
        yield return typeDefinition;
    }
}

public static IEnumerable<TypeDefinition> ExtractNestedTypes(IEnumerable<TypeDefinition> typeDefinitions)
{
    var typesToProcess = new Queue<TypeDefinition>(typeDefinitions);
    while (typesToProcess.Any())
    {
        var typeToProcess = typesToProcess.Dequeue();

        foreach (var nestedType in typeToProcess.Fields
            .Where(x => x.NestedType != null)
            .Select(x => x.NestedType))
        {
            yield return nestedType;
            typesToProcess.Enqueue(nestedType);
        }
    }
}

private static FieldDefinition[] LoadFieldDefinitions(Queue<string> lines, string fileName, ref int lineNumber)
{
    int? currentIndentationLevel = null;
    var fieldDefinitions = new List<FieldDefinition>();
    while (lines.Any())
    {
        lineNumber++;

        int indentationLevel = GetIndentationLevel(lines.Peek());
        currentIndentationLevel ??= indentationLevel;
        if (indentationLevel == 0 || indentationLevel < currentIndentationLevel.Value)
            break;

        if (indentationLevel > currentIndentationLevel.Value)
        {
            FieldDefinition lastFieldDefinition = fieldDefinitions.Last();
            lastFieldDefinition.NestedType = new TypeDefinition
            {
                Name = lastFieldDefinition.Type.TrimEnd(new[] { '[', ']' }),
                Fields = LoadFieldDefinitions(lines, fileName, ref lineNumber)
            };
            continue;
        }

        string definition = lines.Dequeue().Trim();
        fieldDefinitions.Add(ParseFieldDefinition(definition, fileName, lineNumber));
    }

    return fieldDefinitions.ToArray();
}

private static TypeDefinition ParseTypeDefinition(string definition, string fileName, int lineNumber)
{
    /* Examples:
        * type definition: `CreateUserCommand`
        * type definition with description: `CreateUserCommand // Creates a new user`
        * type definition with related type: `CreateUserCommand: UserCommandCreationResult`
        * type definition with short name: `Create => CreateUserCommand: UserCommandCreationResult`
        * obsolete type definition: `-CreateUserCommand`
    */
    var match = Regex.Match(definition, @"^(?<obsolete>\-)?(?<anonymous>ðŸ‘€)?((?<shortName>[^\s=]+)\s*=>\s*)?(?<name>[^\s\/:]+)\s*(:\s*(?<responseType>[^\s\/]+)\s*)?(\/\/\s*(?<description>.+)?)?$");
    if (!match.Success) throw new Exception($"Failed to parse type definition in '{fileName}' at line {lineNumber}: '{definition}'");

    return new TypeDefinition
    {
        Name = match.Groups["name"].Value,
        ShortName = NullOnEmpty(match.Groups["shortName"].Value),
        GroupName = fileName.Split('.')[0],
        Description = NullOnEmpty(match.Groups["description"].Value),
        Fields = Array.Empty<FieldDefinition>(),
        IsObsolete = NullOnEmpty(match.Groups["obsolete"].Value) != null,
        ResponseType = NullOnEmpty(match.Groups["responseType"].Value),
        IsAnonymous = NullOnEmpty(match.Groups["anonymous"].Value) != null
    };
}

private static FieldDefinition ParseFieldDefinition(string definition, string fileName, int lineNumber)
{
    /* Examples:
        * required string field: `EmailAddress: string`
        * optional string field: `EmailAddress: string?`
        * required string field with description: `EmailAddress: string // The users e-mail address`
        * required enum field: `Gender: enum Gender`
        * optional enum field: `Gender: enum Gender?`
        * field with default value: `Id: Guid = Guid.NewGuid()`
    */
    var match = Regex.Match(definition, @"^(?<name>[^\s:]+)\s*:\s*(?<enum>(enum\s+)?)(?<type>[^\s\?]+)(?<optional>[\?]?)(\s*=\s*(?<defaultValue>[a-zA-Z.()_]+))?(\s*\/\/\s*(?<description>.+)?)?$");
    if (!match.Success) throw new Exception($"Failed to parse field definition in '{fileName}' at line {lineNumber}: '{definition}'");

    return new FieldDefinition
    {
        Name = match.Groups["name"].Value,
        Type = match.Groups["type"].Value,
        Description = NullOnEmpty(match.Groups["description"].Value),
        IsRequired = NullOnEmpty(match.Groups["optional"].Value) == null,
        IsEnum = NullOnEmpty(match.Groups["enum"].Value) != null,
        DefaultValue = NullOnEmpty(match.Groups["defaultValue"].Value),
        NestedType = null
    };
}

private static string NullOnEmpty(string str)
    => string.IsNullOrEmpty(str) ? null : str;

private static int GetIndentationLevel(string definition)
    => Regex.Replace(definition, @"[^ ].*$", string.Empty).Length;

public static string CamelCase(string input)
{
    if (string.IsNullOrEmpty(input)) throw new ArgumentNullException(nameof(input));
    return new string(new[] { Char.ToLower(input[0]) }.Concat(input.Skip(1)).ToArray());
}

public static bool IsValueType(string typeName)
{
    switch (typeName.TrimEnd('[', ']'))
    {
    case "bool":
    case "byte":
    case "char":
    case "decimal":
    case "double":
    case "float":
    case "int":
    case "long":
    case "sbyte":
    case "short":
    case "uint":
    case "ulong":
    case "ushort":
    case "DateTimeOffset":
    case "Guid":
        return true;
    case "object":
    case "string":
        return false;
    default:
        return Type.GetType(typeName)?.IsValueType ?? false;
    }
}

#>
